plugins {
    id 'application'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'java-library'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version "5.2.0"
    id 'org.barfuin.gradle.jacocolog' version '1.1.1'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

repositories {
    jcenter()
}


repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'

    // JavaFX for all (targeted) platforms
    //api "org.openjfx:javafx-base:11:win"
    //api "org.openjfx:javafx-graphics:11:win"
    //api "org.openjfx:javafx-controls:11:win"
    //api "org.openjfx:javafx-fxml:11:win"
    //api "org.openjfx:javafx-web:11:win"
    //api "org.openjfx:javafx-swing:11:win"
    //api "org.openjfx:javafx-media:11:win"

    //api "org.openjfx:javafx-base:11:linux"
    //api "org.openjfx:javafx-graphics:11:linux"
    //api "org.openjfx:javafx-controls:11:linux"
    //api "org.openjfx:javafx-fxml:11:linux"
    //api "org.openjfx:javafx-web:11:linux"
    //api "org.openjfx:javafx-swing:11:linux"
    //api "org.openjfx:javafx-media:11:linux"

    //api "org.openjfx:javafx-base:11:mac"
    //api "org.openjfx:javafx-graphics:11:mac"
    //api "org.openjfx:javafx-controls:11:mac"
    //api "org.openjfx:javafx-fxml:11:mac"
    //api "org.openjfx:javafx-web:11:mac"
    //api "org.openjfx:javafx-swing:11:mac"
    //api "org.openjfx:javafx-media:11:mac"

    implementation 'com.opencsv:opencsv:5.3'
}


eclipse {
    project {
        name = 'Projekt 2'
    }
}

javafx {
    version = '11.0.2'
    modules = [ 'javafx.controls','javafx.web', 'javafx.fxml', 'javafx.swing', 'javafx.media', 'javafx.graphics' ]
}

sourceSets.main.java.srcDirs = ['src']
sourceSets.main.resources.srcDirs = ['src']
sourceSets.test.java.srcDirs = ['tests']
sourceSets.test.resources.srcDirs = ['tests']

test {
    useJUnit()

    maxHeapSize = '1G'

    ignoreFailures = true

    finalizedBy jacocoTestReport // Generate test report for coverage
}

javadoc {
    exclude 'application/**'
    exclude 'view/**'
    options.encoding = 'UTF-8'
}

task testJavadoc(type: Javadoc) {
    source = sourceSets.test.allJava
    classpath = sourceSets.test.compileClasspath
    options.encoding = 'UTF-8'
    destinationDir = file("${buildDir}/docs/testjavadoc")
}

tasks.withType(JavaExec) {
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//assemble.dependsOn shadowJar

checkstyle {
    configFile file("libs/javadoc_checks.xml")
    ignoreFailures = true
}

checkstyleMain {
    source = sourceSets.main.allJava
    exclude 'application/**'
    exclude 'view/**'
}
checkstyleTest {
    source = sourceSets.test.allJava
}

jacocoTestReport {
    dependsOn test
    reports {
        csv.enabled false
        xml.enabled true
        html.destination file("${buildDir}/reports/coverage")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['application/**','view/**','ai/**'])
        }))
    }
}

jacocoLogTestCoverage {
    counters {
        showBranchCoverage = false // Breaks otherwise
    }
}


mainClassName = 'application.Runner'
